TemplateDefinition = Space TemplateDefinitionComponent* EOF {} ;

TParam = LP TParamName (SEP DefaultValue)? RP Space {};
TParamName = (!(SEP / RP) _)+ ;
DefaultValue = (!RP _)* ;

Function = LF "#" FName ":" FParam (SEP FParam)* RF {} ;
FName = (!COL _)+ ;
FParam = Space (!(SEP / RF) TemplateDefinitionComponent)* {} ;

SwitchFunction = LF "#switch:" FParam (SEP SwitchTestCase)+ RF {} ;
SwitchTestCase = "#default" Space EQ FParam {}
               / SwitchTest Space &RF {}
               / SwitchTest (EQ FParam)? {} ;
SwitchTest = (!(SEP / RF / EQ) TemplateDefinitionComponent)+ {} ;

TemplateDefinitionComponent = TParam {}
                            / (SwitchFunction / Function) {}
                            / TemplateCall {}
                            / (NoInclude / IncludeOnly / Comment)
                            / _ {};

NoInclude = "<noinclude>" _*+ "</noinclude>" ;
IncludeOnly = "<includeonly>" _*+ "</includeonly>" ;

TemplateCall = LF TName (SEP TCallParam)* RF {} ;
TName = (!(SEP / RF) _)+ ;
TCallParam = Number           EQ (!(SEP / RF) TemplateDefinitionComponent)* {} /
			 TCallParamName   EQ (!(SEP / RF) TemplateDefinitionComponent)* {} /
			                  (!(SEP / RF) TemplateDefinitionComponent)* {};
TCallParamName = (!(EQ / SEP / RF) _)+ ;

LP  = "{{{" ;
RP  = "}}}" ;
LF  = "{{" Space ;
RF  = Space "}}" ;
SEP = Space "|"  Space ;
EQ  = Space "="  Space ;
COL = Space ":"  Space ;

Number = Digit+ ;
Digit  = [0-9] ;
Letter = [a-z] / [A-Z] / [äÄüÜöÖß] ;

Space = (" " / EOL / Comment)* ;

Comment = "<!--" _++ "-->" ;

EOF = !_ ;
EOL = [\r\n]+ ;