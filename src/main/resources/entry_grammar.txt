Dokument = (!KOPF2 Line)* Eintrag? ;

//==============================================================================
// Wiktionary Eintrag
//==============================================================================
Eintrag = DeEintrag _*+ EOF
        / OldSpellingEintrag Line* EOF
        / AltSpellingEintrag Line* EOF
        / DeEintragWithErrors ;
DeEintrag = DeSpracheKopf (!KOPF3 Line)* DeWortart+ ;
DeEintragWithErrors = DeSpracheKopf _* EOF {};
OldSpellingEintrag = DeSpracheKopf Line*+ OldSpellingTemplate ;
OldSpellingTemplate = LT ("Alte Schreibweise" / "Schweizer und Liechtensteiner Schreibweise") SEP TextualTParam RestOfLine {};
AltSpellingEintrag = DeSpracheKopf Line*+ AltSpellingTemplate ;
AltSpellingTemplate = "*" Space "Alternative Schreibweise" _*+ Link RestOfLine {}
                    / LT "Alternative Schreibweisen" RT EOL ":" Link {};

DeSpracheKopf = KOPF2 Lemma "(" DeSpracheTemplate ")" Space KOPF2 RestOfLine ;
DeSpracheTemplate = LT "Sprache" SEP "Deutsch" RT ;
Lemma = (!(Space "(") _)+ Space {};

DeWortart = ( WortartKopf WortartBody / UnknownWortartKopf (!KopfStart Line)* ) ;
WortartKopf = SubstantivKopf {saveEintrag};
WortartBody = MiddleSection TranslationsSection? ~{};
UnknownWortartKopf = KOPF3 WortartTemplate _*+ KOPF3 RestOfLine ;
WortartTemplate = LT "Wortart" SEP TParam SEP "Deutsch" RT {};

//==============================================================================
// Substantiv
//==============================================================================
SubstantivKopf = KOPF3 SubstantivTemplate Space SubstantivAttributes Space KOPF3 RestOfLine ;
SubstantivTemplate = LT "Wortart" SEP "Substantiv" SEP "Deutsch" RT {createSubstantiv};
SubstantivAttributes = (","? Space SubstantivAttribute)* ~{};
SubstantivAttribute = Gender {substantivGender}
                    / WortartTemplate {substantivWortart}
                    / "''adjektivische Deklination" ","? "''" {substantivAdjDeklination};

//------------------------------------------------------------------------------
// Flexion table
//------------------------------------------------------------------------------
FlexionTable = FlexionTableKopf FlexionForm* RT RestOfLine ;
FlexionTableKopf = LT "Deutsch Substantiv Übersicht" Space RestOfLine ;
FlexionForm = SEP (Genus / NomSg / NomPl / GenSg / GenPl / DatSg / DatPl / AkkSg / AkkPl / BadLine ) ;
Genus = "Genus" (Space Digit)? "=" ([mnfu0x] / "pl") EOL {addGenus};
NomSg = "Nominativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addNomSg};
NomPl = "Nominativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addNomPl};
GenSg = "Genitiv Singular" Space OptDigit "*"? Space "=" Phrase EOL {addGenSg};
GenPl = "Genitiv Plural" Space OptDigit "*"? Space "=" Phrase EOL {addGenPl};
DatSg = "Dativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addDatSg};
DatPl = "Dativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addDatPl};
AkkSg = "Akkusativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addAkkSg};
AkkPl = "Akkusativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addAkkPl};

//==============================================================================
// Common Wiktionary markup
//==============================================================================
Gender = LT GenderTemplateArgument "."? RT Space {};
GenderTemplateArgument = [mnfu]+ {};

MiddleSection = (!TranslationsKopf (FlexionTable / MeaningsTextbaustein / Line))* ;

//------------------------------------------------------------------------------
// Meanings
//------------------------------------------------------------------------------
MeaningsTextbaustein = MeaningsKopf MeaningList ;
MeaningsKopf = LT "Bedeutungen" RT RestOfLine ;
MeaningList = (!TextbausteinEnd (Meaning / Line))* ;
Meaning = MeaningLvl (ItemNo / "*") MeaningKontext Space RichTextComponent*+ EOL {};
MeaningLvl = ":"+ ;
MeaningKontext = (Kontext / AbkTemplate)? {};

//------------------------------------------------------------------------------
// Translations
//------------------------------------------------------------------------------
TranslationsSection = TranslationsKopf (!TranslationsTableKopf Line)* TranslationsTable (!KopfStart Line)* ;
TranslationsKopf = KOPF4 LT "Übersetzungen" RT Space KOPF4 RestOfLine ;
TranslationsTable = TranslationsTableKopf (LangTranslations / DialectTable / !RT Line)*+ RT RestOfLine ;
TranslationsTableKopf = LT "Ü-Tabelle" Line ;
LangTranslations = LangLvl Lang ":" Space TranslationMeaning* RestOfLine {addTranslationsForLanguage};
LangLvl = "*"+ ;
Lang = LT Phrase RT {};
TranslationMeaning = ItemNo Translation+ {};
Translation = TranslationDetails (UeTemplate / UetTemplate) Gender? TranslationDetails (COMMA / SEMICOLON)? Space {};
TranslationDetails = (CursiveText / Link / (!(ItemNo / UeTemplate / UetTemplate / COMMA / SEMICOLON / EOL) _))* (COMMA / SEMICOLON)?;
UeTemplate = LT ("Ü" / "Ü?") SEP TParam SEP TParam (SEP TParam)? (SEP TParam)? RT Space {};
UetTemplate = LT ("Üt" / "Üt?") SEP TParam SEP TParam SEP TParam (SEP TParam)? (SEP TParam)? RT Space {};
DialectTable = "|Dialekttabelle=" RestOfLine (!RT Line)* ; // ignore it for now

//------------------------------------------------------------------------------
// General Wiki Markup
//------------------------------------------------------------------------------
KOPF2       = "=="      Space ;
KOPF3       = "==="     Space ;
KOPF4       = "===="    Space ;
KopfStart   = "==" ;
SEP         = Space "|" Space ; // attribute separator (used in links and templates to separate attributes)

TextbausteinEnd = LT / KopfStart / EOF ;

// Rich text components
RichTextComponent = Link {}
                  / CursiveText {}
                  / !EOL _ {};

// Link
LL = "[[" ;   // Left Link opening
RL = "]]" ;   // Right Link opening; no space after, because wee need to treat spaces as part of plain text that can come after the link
Link = LL LinkAttr (SEP LinkAttr)? RL {};
LinkAttr = (!(SEP / RL) _)+ ;

CursiveText = "''" RichTextComponent*+ "''" {};

// Template
LT =       "{{" Space ; // Left Template opening
RT = Space "}}" ; // Right Template closing
TParam = Number     EQ (!(SEP / RT) RichTextComponent)* {} /
	     TParamName EQ (!(SEP / RT) RichTextComponent)* {} /
	     TPosParam {};
TParamName = (!(SEP / RT / EQ) _)+ ;
TPosParam = (!(SEP / RT) RichTextComponent)* {};
TextualTParam = (!(SEP / RT) _)+ ;

// Kontext template
Kontext = LT [Kk] KontextPartList KontextFtParam KontextSprParam RT {};
KontextPartList = !(SEP "ft" EQ / SEP "spr" EQ) (SEP TPosParam KontextPartSep)+ {};
KontextPartSep = (SEP "t" [1-7] EQ [:;_])? {};
KontextFtParam = (SEP "ft" EQ (!(SEP / RT) RichTextComponent*))? {};
KontextSprParam = (SEP "spr" EQ (!(SEP / RT) RichTextComponent*))? ;

AbkTemplate = LT AbkTemplateName (SEP TParam)* RT {} ;
AbkTemplateName = (!(SEP / RT) _)+ ;

// Item number, that is used to number the elements in a Textbaustein like translation table or meanings
ItemNo = "[" ItemNoBody "]" Space {};
ItemNoBody = ItemNoRange (COMMA ItemNoRange)* {};
ItemNoRange = (ItemNoElement "–" ItemNoElement / ItemNoElement) {};
ItemNoElement = ([a-z] / [0-9])+ ;

//------------------------------------------------------------------------------
// HTML markup
//------------------------------------------------------------------------------
BR = "<br" Space "/>" ;
Comment         = CommentStart _++ CommentEnd Space ;
CommentStart    = "<!--" Space ;
CommentEnd      = "-->" Space ;

//------------------------------------------------------------------------------
// Common expressions
//------------------------------------------------------------------------------
Line = _*+ EOL ;
BadLine = _++ EOL ;
RestOfLine = _*+ EOL ;

Digit = [0-9] ;
OptDigit = Digit? ;
Number = Digit+ ;

Letter = !Digit ^[!@#$%^&*()_-+=[\]{};:'"\\|<>,./?`~\n\t ] ;
Word = Letter+ ("-" Letter+)* ;
Phrase = Word (Space Word)* ;

Space = " "* ;
COMMA = "," Space ;
SEMICOLON = ";" Space ;
EQ = Space "=" Space ;
EOF = !_ ;
EOL = [\r\n]+ ;