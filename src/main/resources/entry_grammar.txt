Dokument = (!KOPF2 Line)* Eintrag EOF ;

//==============================================================================
// Wiktionary Eintrag
//==============================================================================
Eintrag = DeEintrag? OtherLangEintrag* EOF ;
OtherLangEintrag = (!DeSpracheKopf Line)+ ;
DeEintrag = DeSpracheKopf (!KOPF3 Line)* DeWortart+ ;

DeSpracheKopf = KOPF2 Lemma "(" DeSpracheTemplate ")" Space KOPF2 RestOfLine ;
DeSpracheTemplate = LT "Sprache" SEP "Deutsch" RT ;
Lemma = Letter+ Space {};

DeWortart = ( WortartKopf WortartBody / UnknownWortartKopf Line* ) ;
WortartKopf = SubstantivKopf {saveEintrag};
WortartBody = MiddleSection TranslationsSection? ~{};
UnknownWortartKopf = KOPF3 WortartTemplate _*+ KOPF3 RestOfLine ;
WortartTemplate = LT "Wortart" SEP TParam SEP "Deutsch" RT {};

//==============================================================================
// Substantiv
//==============================================================================
SubstantivKopf = KOPF3 SubstantivTemplate Space SubstantivAttributes Space KOPF3 RestOfLine ;
SubstantivTemplate = LT "Wortart" SEP "Substantiv" SEP "Deutsch" RT {createSubstantiv};
SubstantivAttributes = (","? Space SubstantivAttribute)+ ~{} / _++ KOPF3 ;
SubstantivAttribute = Gender {substantivGender}
                    / WortartTemplate {substantivWortart}
                    / "''adjektivische Deklination" ","? "''" {substantivAdjDeklination};

//------------------------------------------------------------------------------
// Flexion table
//------------------------------------------------------------------------------
FlexionTable = FlexionTableKopf FlexionForm* RT RestOfLine ;
FlexionTableKopf = LT "Deutsch Substantiv Übersicht" Space RestOfLine ;
FlexionForm = SEP (NomSg / NomPl / GenSg / GenPl / DatSg / DatPl / AkkSg / AkkPl / BadLine ) ;
NomSg = "Nominativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addNomSg};
NomPl = "Nominativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addNomPl};
GenSg = "Genitiv Singular" Space OptDigit "*"? Space "=" Phrase EOL {addGenSg};
GenPl = "Genitiv Plural" Space OptDigit "*"? Space "=" Phrase EOL {addGenPl};
DatSg = "Dativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addDatSg};
DatPl = "Dativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addDatPl};
AkkSg = "Akkusativ Singular" Space OptDigit "*"? Space "=" Phrase EOL {addAkkSg};
AkkPl = "Akkusativ Plural" Space OptDigit "*"? Space "=" Phrase EOL {addAkkPl};

//==============================================================================
// Common Wiktionary markup
//==============================================================================
Gender = LT GenderTemplateArgument RT Space {};
GenderTemplateArgument = "mf" / "f" ("m" / "n") / "n" ("m" / "f") / "m" / "f" / "n" / "u" ;

// TODO: enable MeaningsTextbaustein when fixed
//MiddleSection = (!TranslationsKopf (FlexionTable / MeaningsTextbaustein / Line))* ;
MiddleSection = (!TranslationsKopf (FlexionTable / Line))* ;

//------------------------------------------------------------------------------
// Meanings
//------------------------------------------------------------------------------
MeaningsTextbaustein = MeaningsKopf MeaningList ;
MeaningsKopf = LT "Bedeutungen" RT RestOfLine ;
MeaningList = (!TextbausteinEnd (Meaning / Line))* ;
Meaning = MeaningLvl RichTextComponent++ EOL {};
MeaningLvl = ":"+ (ItemNo / "*") ;

//------------------------------------------------------------------------------
// Translations
//------------------------------------------------------------------------------
TranslationsSection = TranslationsKopf (!TranslationsTableKopf Line)* TranslationsTable (!KopfStart Line)* ;
TranslationsKopf = KOPF4 LT "Übersetzungen" RT Space KOPF4 RestOfLine ;
TranslationsTable = TranslationsTableKopf (LangTranslations / DialectTable / !RT Line)*+ RT RestOfLine ;
TranslationsTableKopf = LT "Ü-Tabelle" Line ;
LangTranslations = LangLvl Lang ":" Space TranslationMeaning* RestOfLine {addTranslationsForLanguage};
LangLvl = "*"+ ;
Lang = LT Word RT {};
TranslationMeaning = ItemNo Translation+ {};
Translation = TranslationDetails (UeTemplate / UetTemplate) Gender? TranslationDetails (COMMA / SEMICOLON)? Space {};
TranslationDetails = (CursiveText / Link / (!(ItemNo / UeTemplate / UetTemplate / COMMA / SEMICOLON / EOL) _))* (COMMA / SEMICOLON)?;
UeTemplate = LT ("Ü" / "Ü?") SEP TParam SEP TParam (SEP TParam)? (SEP TParam)? RT Space {};
UetTemplate = LT ("Üt" / "Üt?") SEP TParam SEP TParam SEP TParam (SEP TParam)? (SEP TParam)? RT Space {};
DialectTable = "|Dialekttabelle=" RestOfLine (!RT Line)* ; // ignore it for now

//------------------------------------------------------------------------------
// General Wiki Markup
//------------------------------------------------------------------------------
KOPF2       = "=="      Space ;
KOPF3       = "==="     Space ;
KOPF4       = "===="    Space ;
KopfStart   = "==" ;
SEP         = Space "|" Space ; // attribute separator (used in links and templates to separate attributes)

TextbausteinEnd = LT / KopfStart / EOF ;

// Rich text components
RichTextComponent = Link {}
                  / CursiveText {}
                  / Template {}
                  / !EOL _ {};

// Link
LL = "[[" ;   // Left Link opening
RL = "]]" ;   // Right Link opening; no space after, because wee need to treat spaces as part of plain text that can come after the link
Link = LL LinkAttr (SEP LinkAttr)? RL {};
LinkAttr = (!(SEP / RL) _)+ ;

CursiveText = "''" RichTextComponent*+ "''" {};

// Template
LT =       "{{" Space ; // Left Template opening
RT = Space "}}" ; // Right Template closing
Template = LT TName (SEP TParam)* RT {} ;
TName = (!(SEP / RT) _)+ ;
TParam = Number     EQ (!(SEP / RT) RichTextComponent)* {} /
	     TParamName EQ (!(SEP / RT) RichTextComponent)* {} /
			           (!(SEP / RT) RichTextComponent)* {};
TParamName = (!(SEP / RT / EQ) _)+ ;

// Item number, that is used to number the elements in a Textbaustein like translation table or meanings
ItemNo = "[" _++ "]" Space {};

//------------------------------------------------------------------------------
// HTML markup
//------------------------------------------------------------------------------
BR = "<br" Space "/>" ;
Comment         = CommentStart _++ CommentEnd Space ;
CommentStart    = "<!--" Space ;
CommentEnd      = "-->" Space ;

//------------------------------------------------------------------------------
// Common expressions
//------------------------------------------------------------------------------
Line = _++ EOL ;
BadLine = _++ EOL ;
EmptyLine = Space EOL ;
RestOfLine = _*+ EOL ;

Digit = [0-9] ;
OptDigit = Digit? ;
Number = Digit+ ;

Letter = [a-z] / [A-Z] / [äÄüÜöÖß] ;
Word = Letter (Letter / [-'])* ;
Phrase = Word (Space Word)* ;

Space = " "* ;
COMMA = "," Space ;
SEMICOLON = ";" Space ;
EQ = Space "=" Space ;
EOF = !_ ;
EOL = [\r\n]+ / EOF ;