//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2015-07-07 23:04:29 GMT
//  from grammar
//    '/home/krzysiek/dev/projects/fiszki/wiktionary-parser/src/main/java/p
//    l/kwitukiewicz/wiktionary/parser/../../../../../resources/grammar.txt
//    '.
//
//=========================================================================

package wiktiopeggynary.parser;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import wiktiopeggynary.model.Kasus;
import wiktiopeggynary.model.Numerus;
import wiktiopeggynary.model.ReferenceWiktionaryEntry;
import wiktiopeggynary.model.WiktionaryEntry;
import wiktiopeggynary.model.markup.*;
import wiktiopeggynary.model.meaning.KontextShortcutMapper;
import wiktiopeggynary.model.meaning.Meaning;
import wiktiopeggynary.model.substantiv.*;
import wiktiopeggynary.model.translation.Translation;
import wiktiopeggynary.model.translation.TranslationMeaning;
import wiktiopeggynary.parser.mouse.SemanticsBase;

import java.util.*;
import java.util.stream.IntStream;

class WiktionarySemantics extends SemanticsBase {
	
	private static final Logger logger = LoggerFactory.getLogger(WiktionarySemantics.class);
	
	private String lemma;
	private WiktionaryEntry entryWorkingCopy;
	
	private Stack<WiktionaryEntry> wiktionaryEntries = new Stack<>();
	
	public Collection<WiktionaryEntry> getWiktionaryEntries() {
		return Collections.unmodifiableCollection(wiktionaryEntries);
	}
	
	void saveEintrag() {
		wiktionaryEntries.push(entryWorkingCopy);
	}
	
	void WortartBody_fail() {
		logger.error("[lemma={}] DeWortart_fail: {}", lemma, getFormattedErrorMessageForLogging());
		lhs().errClear();
	}
	
	void DeEintragWithErrors() {
		throw new ParseException("The entry for '" + lemma + "' is german, but cannot be parsed");
	}
	
	//-------------------------------------------------------------------
	//  WortartTemplate = LT "Wortart" IT TemplateAttr IT "Deutsch" RT
	//-------------------------------------------------------------------
	void WortartTemplate() {
		lhs().put(rhs(3).text());
	}
	
	//-------------------------------------------------------------------
	//  Lemma = Letter+ Space
	//-------------------------------------------------------------------
	void Lemma() {
		lemma = rhsText(0, rhsSize() - 1);
	}
	
	void createSubstantiv() {
		entryWorkingCopy = new Substantiv();
		entryWorkingCopy.setLemma(lemma);
	}
	
	void SubstantivAttributes_fail() {
		logger.error("Exception parsing Substantiv attribute for lemma '{}': {}", lemma,
		             getFormattedErrorMessageForLogging());
		lhs().errClear();
	}
	
	void substantivGender() {
		((Substantiv) entryWorkingCopy).setGender((MultiGender) rhs(0).get());
	}
	
	//-------------------------------------------------------------------
	// Gender = LT GenderTemplateArgument RT
	//-------------------------------------------------------------------
	void Gender() {
		lhs().put(rhs(1).get());
	}
	
	//-------------------------------------------------------------------
	// GenderTemplateArgument = ("fPl." / "mPl.")
	//-------------------------------------------------------------------
	void GenderTemplateArgument_0() {
		lhs().put(new MultiGender(Gender.fromShortcut(lhs().text())));
	}
	
	//-------------------------------------------------------------------
	// GenderTemplateArgument = [mnfu]+
	//-------------------------------------------------------------------
	void GenderTemplateArgument_1() {
		lhs().put(new MultiGender(lhs().text()));
	}
	
	void substantivWortart() {
		((Substantiv) entryWorkingCopy).addAttribute((String) rhs(0).get());
	}
	
	void substantivAdjDeklination() {
		((Substantiv) entryWorkingCopy).addAttribute(Substantiv.ATTR_ADJ_DEKLINATION);
	}
	
	//=====================================================================
	//  Genus = "Genus" (Space Digit)? "=" ([mnfu0x] / "pl") EOL
	//                                            n-2        n-1
	//=====================================================================
	void addGenus() {
		Gender gender = Gender.fromShortcut(rhs(rhsSize() - 2).text());
		if (gender != Gender.PLURAL) {
			((Substantiv) entryWorkingCopy).addFlexionForm(Numerus.Singular,
			                                               new FlexionForm(gender));
		} else {
			((Substantiv) entryWorkingCopy).setGender(new MultiGender(Gender.PLURAL));
		}
	}
	
	//-------------------------------------------------------------------
	//  NomSg = "Nominativ Singular" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addNomSg() {
		addFlexion(Kasus.Nominativ, Numerus.Singular);
	}
	
	//-------------------------------------------------------------------
	//  NomPl = "Nominativ Plural" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addNomPl() {
		addFlexion(Kasus.Nominativ, Numerus.Plural);
	}
	
	//-------------------------------------------------------------------
	//  GenSg = "Genitiv Singular" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addGenSg() {
		addFlexion(Kasus.Genitiv, Numerus.Singular);
	}
	
	//-------------------------------------------------------------------
	//  GenPl = "Genitiv Plural" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addGenPl() {
		addFlexion(Kasus.Genitiv, Numerus.Plural);
	}
	
	//-------------------------------------------------------------------
	//  DatSg = "Dativ Singular" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addDatSg() {
		addFlexion(Kasus.Dativ, Numerus.Singular);
	}
	
	//-------------------------------------------------------------------
	//  DatPl = "Dativ Plural" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addDatPl() {
		addFlexion(Kasus.Dativ, Numerus.Plural);
	}
	
	//-------------------------------------------------------------------
	//  AkkSg = "Akkusativ Singular" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addAkkSg() {
		addFlexion(Kasus.Akkusativ, Numerus.Singular);
	}
	
	//-------------------------------------------------------------------
	//  AkkPl = "Akkusativ Plural" Space OptDigit "*"? Space "=" Phrase EOL
	//-------------------------------------------------------------------
	void addAkkPl() {
		addFlexion(Kasus.Akkusativ, Numerus.Plural);
	}
	
	private void addFlexion(Kasus kasus, Numerus numerus) {
		String variant = rhs(rhsSize() - 2).text();
		String formNo = rhs(2).text();
		int formIdx = formNo.isEmpty() ? 0 : Integer.valueOf(formNo) - 1;
		List<FlexionForm> flexionForms = ((Substantiv) entryWorkingCopy).getFlexionForms(numerus);
		FlexionForm flexionForm;
		if (formIdx < flexionForms.size()) {
			flexionForm = flexionForms.get(formIdx);
		} else if (numerus == Numerus.Singular) {
			flexionForm = new FlexionForm(((Substantiv) entryWorkingCopy).getGender().getGenders()[0]);
			((Substantiv) entryWorkingCopy).addFlexionForm(Numerus.Singular, flexionForm);
		} else if (numerus == Numerus.Plural) {
			flexionForm = new FlexionForm(Gender.PLURAL);
			((Substantiv) entryWorkingCopy).addFlexionForm(numerus, flexionForm);
		} else {
			throw new IllegalStateException("Singular flexion form does not yet exist for " + entryWorkingCopy.getLemma());
		}
		Optional<Flexion> optExistingFlexion = flexionForm.getFlexions().stream().filter(
				f -> f.getKasus().equals(kasus)).findFirst();
		if (optExistingFlexion.isPresent()) {
			optExistingFlexion.get().addVariant(variant);
		} else {
			Flexion flexion = new Flexion(kasus);
			flexion.addVariant(variant);
			flexionForm.addFlexion(flexion);
		}
	}
	
	//-------------------------------------------------------------------
	//  LangTranslations = LangLvl Lang ":" Space TranslationMeaning* RestOfLine
	//-------------------------------------------------------------------
	void addTranslationsForLanguage() {
		String language = (String) rhs(1).get();
		for (int i = 4; i < rhsSize() - 1; i++) {
			TranslationMeaning meaning = (TranslationMeaning) rhs(i).get();
			if (!meaning.getText().isEmpty()) {
				wiktionaryEntries.peek().addTranslationMeaning(language, meaning);
			}
		}
	}
	
	//-------------------------------------------------------------------
	//  Lang = LT Word RT
	//-------------------------------------------------------------------
	void Lang() {
		lhs().put(rhs(1).text());
	}
	
	//-------------------------------------------------------------------
	//  TranslationMeaning = ItemNo TranslationMeaningBody SEMICOLON?
	//-------------------------------------------------------------------
	void TranslationMeaning() {
		List<ItemNumber> itemNumbers = (List<ItemNumber>) rhs(0).get();
		RichText text = (RichText) rhs(1).get();
		TranslationMeaning meaning = new TranslationMeaning(itemNumbers, text);
		lhs().put(meaning);
	}
	
	//=====================================================================
	//  TranslationMeaningBody = (UeTemplate / UetTemplate / !(ItemNo) RichTextComponent)+
	//=====================================================================
	void TranslationMeaningBody() {
		RichText text = new RichText();
		processSequenceOfRichTextComponents(0, rhsSize(), text);
		lhs().put(text);
	}
	
	//-------------------------------------------------------------------
	//  UeTemplate = LT ("Ü" / "Ü?") IT TemplateAttr IT TemplateAttr
	//                0      1        2       3       4       5
	//      (IT TemplateAttr)? (IT TemplateAttr)? RT
	//        6        7         8      9        n-1
	//-------------------------------------------------------------------
	void UeTemplate() {
		Translation translation = new Translation();
		translation.setInternalLink(rhs(5).text());
		if (rhsSize() - 1 >= 8)
			translation.setLabel(rhs(7).text());
		lhs().put(translation);
	}
	
	//-------------------------------------------------------------------
	//  UetTemplate = LT ("Üt" / "Üt?") IT TemplateAttr IT TemplateAttr
	//                 0        1        2       3       4       5
	//      (IT TemplateAttr)? (IT TemplateAttr)? (IT TemplateAttr)? RT
	//        6        7        8      9          10       11       n-1
	//-------------------------------------------------------------------
	void UetTemplate() {
		Translation translation = new Translation();
		translation.setInternalLink(rhs(5).text());
		if (rhsSize() - 1 >= 8)
			translation.setTranscription(rhs(7).text());
		if (rhsSize() - 1 >= 10)
			translation.setLabel(rhs(9).text());
		lhs().put(translation);
	}
	
	//-------------------------------------------------------------------
	//  ItemNo = "[" ItemNoBody "]" Space
	//-------------------------------------------------------------------
	void ItemNo() {
		lhs().put(rhs(1).get());
	}
	
	//=====================================================================
	//  ItemNoBody = ItemNoRange (COMMA ItemNoRange)*
	//=====================================================================
	void ItemNoBody() {
		List<ItemNumber> numbers = new ArrayList<>();
		for (int i = 0; i < rhsSize(); i += 2) {
			numbers.add((ItemNumber) rhs(i).get());
		}
		lhs().put(numbers);
	}
	
	//=====================================================================
	//  ItemNoRange = ItemNoElement "-" ItemNoElement / ItemNoElement
	//=====================================================================
	void ItemNoRange() {
		if (rhsSize() > 1) {
			lhs().put(ItemNumber.range(rhs(0).text(), rhs(2).text()));
		} else {
			lhs().put(ItemNumber.singleNumber(rhs(0).text()));
		}
	}
	
	//-------------------------------------------------------------------
	//  Meaning = MeaningLvl (ItemNo / "*") RichTextComponent* EOL
	//                0            1              2..n-2       n-1
	//-------------------------------------------------------------------
	void Meaning() {
		Meaning meaning = new Meaning();
		
		// ItemNo
		List<ItemNumber> numbers = (List<ItemNumber>) rhs(1).get();
		if (numbers == null) {
			numbers = Collections.singletonList(ItemNumber.singleNumber(rhs(1).text()));
		}
		meaning.setNumbers(numbers);
		
		// text
		RichText text = new RichText();
		processSequenceOfRichTextComponents(2, rhsSize() - 1, text);
		meaning.setText(text);
		
		if (rhs(0).text().length() == 1) {
			entryWorkingCopy.addMeaning(meaning);
		} else {
			Meaning mainMeaning = entryWorkingCopy.getMeanings().get(entryWorkingCopy.getMeanings().size() - 1);
			mainMeaning.addSubMeaing(meaning);
		}
	}
	
	//=====================================================================
	//  MeaningKontext = Kontext?
	//=====================================================================
	void MeaningKontext() {
		if (!lhs().isEmpty())
			lhs().put(rhs(0).get());
	}
	
	//=====================================================================
	//  OldSpellingTemplate = LT "..." SEP TextualTParam RestOfLine
	//                        0    1    2         3         n-1
	//=====================================================================
	void OldSpellingTemplate() {
		ReferenceWiktionaryEntry entry = new ReferenceWiktionaryEntry();
		entry.setLemma(lemma);
		entry.setReferenceType(ReferenceWiktionaryEntry.ReferenceType.fromReferenceName(rhs(1).text()));
		entry.setReferenceValue(rhs(3).text());
		wiktionaryEntries.push(entry);
	}
	
	//=====================================================================
	//  AltSpellingTemplate = "*" Space "..." _*+ Link RestOfLine ;
	//                         0    1     2  ...  n-2     n-1
	//=====================================================================
	void AltSpellingTemplate_0() {
		AltSpellingTemplate(rhsSize() - 2);
	}
	
	//-------------------------------------------------------------------
	//  AltSpellingTemplate_1 = LT "..." RT EOL ":" Link
	//                          0    1   2   3   4   5
	//-------------------------------------------------------------------
	void AltSpellingTemplate_1() {
		AltSpellingTemplate(5);
	}
	
	private void AltSpellingTemplate(int linkIndex) {
		ReferenceWiktionaryEntry entry = new ReferenceWiktionaryEntry();
		entry.setLemma(lemma);
		entry.setReferenceType(ReferenceWiktionaryEntry.ReferenceType.ALTERNATIVE_SPELLING);
		InternalLink link = (InternalLink) rhs(linkIndex).get();
		entry.setReferenceValue(link.getPageTitle());
		wiktionaryEntries.push(entry);
	}
	
	//-------------------------------------------------------------------
	//  TParam = Number EQ (!(SEP / RT) RichTextComponent)*
	//             0    1                        2
	//-------------------------------------------------------------------
	void TParam_0() {
		RichText richText = new RichText();
		processSequenceOfRichTextComponents(2, rhsSize(), richText);
		lhs().put(new NumberedTemplateParameter(Integer.valueOf(rhs(0).text()), richText));
	}
	
	//-------------------------------------------------------------------
	//  TParam = Name EQ (!(SEP / RT) RichTextComponent)*
	//             0  1                        2
	//-------------------------------------------------------------------
	void TParam_1() {
		RichText richText = new RichText();
		processSequenceOfRichTextComponents(2, rhsSize(), richText);
		lhs().put(new NamedTemplateParameter(rhs(0).text(), richText));
	}
	
	//-------------------------------------------------------------------
	//  TParam = TPosParam
	//-------------------------------------------------------------------
	void TParam_2() {
		lhs().put(new PositionalTemplateParameter((RichText) rhs(0).get()));
	}
	
	//-------------------------------------------------------------------
	//  TPosParam = RichTextComponent*
	//-------------------------------------------------------------------
	void TPosParam() {
		RichText richText = new RichText();
		processSequenceOfRichTextComponents(0, rhsSize(), richText);
		lhs().put(richText);
	}
	
	//-------------------------------------------------------------------
	//  Link = LL LinkAttr (SEP LinkAttr)? RL
	//         0      1      2      3      4(2)
	//-------------------------------------------------------------------
	void Link() {
		InternalLink.Builder linkBuilder = new InternalLink.Builder().withPageTitle(rhs(1).text());
		if (rhsSize() > 3)
			linkBuilder.withLinkText(rhs(3).text());
		lhs().put(linkBuilder.build());
	}
	
	//-------------------------------------------------------------------
	//  CursiveText = "''" RichTextComponent*+ "''"
	//                  0            1          n-1
	//-------------------------------------------------------------------
	void CursiveText() {
		RichText body = new RichText();
		processSequenceOfRichTextComponents(1, rhsSize() - 1, body);
		lhs().put(new CursiveBlock(body));
	}
	
	void RichtTextLink() {
		lhs().put(rhs(0).get());
	}
	
	void RichTextCursiveText() {
		lhs().put(rhs(0).get());
	}
	
	void RichTextKTemplate() {
		lhs().put(rhs(0).get());
	}
	
	void RichTextAbkTemplate() {
		lhs().put(rhs(0).get());
	}
	
	void RichTextGender() {
		lhs().put(rhs(0).get());
	}
	
	void RichTextTranslation() {
		lhs().put(rhs(0).get());
	}
	
	//-------------------------------------------------------------------
	//  UnknownTemplate = LT TName (SEP TParam)* RT
	//-------------------------------------------------------------------
	void UnknownTemplate() {
		throw new ParseException("Unexpected template in RichText: " + lhs().text());
	}
	
	//-------------------------------------------------------------------
	//  RichTextComponent = !EOL _
	//-------------------------------------------------------------------
	void RichTextPlainText() {
		lhs().put(new PlainText(rhsText(0, rhsSize())));
	}
	
	//=====================================================================
	//  KTemplate = LT ([Kk] / "Kontext") (SEP TParam)+ RT
	//              0          1            2     3     n-1
	//=====================================================================
	void KTemplate() {
		List<TemplateParameter> params = new ArrayList<>();
		for (int i = 3; i < rhsSize() - 1; i += 2) {
			params.add((TemplateParameter) rhs(i).get());
		}
		lhs().put(KTemplate.fromTemplate(params));
	}
	
	//=====================================================================
	//  AbkTemplate = LT AbkTemplateName (SEP TParam)* RT
	//                0         1          2     3     n-1
	//=====================================================================
	boolean AbkTemplate() {
		String abk = rhs(1).text();
		if (!KontextShortcutMapper.getShortcuts().containsKey(abk))
			return false;
		if (rhsSize() > 5)
			throw new ParseException("More than 1 parameter in Abk-template: " + abk);
		KTemplate kontext = new KTemplate();
		kontext.setParts(Collections.singletonList(new KTemplate.Part(new RichText(abk), null)));
		if (rhsSize() == 5) {
			TemplateParameter param = (TemplateParameter) rhs(3).get();
			kontext.setSuffix(param.getValue());
		}
		lhs().put(kontext);
		return true;
	}
	
	void WpTemplate() {
	
	}
	
	//=====================================================================
	// Utility methods
	//=====================================================================
	private void processSequenceOfRichTextComponents(int startInclusive, int endExclusive, RichText richText) {
		IntStream.range(startInclusive, endExclusive)
		         .mapToObj(i -> rhs(i).get())
		         .filter(Objects::nonNull)
		         .forEach(o -> richText.addComponent((RichTextComponent) o));
	}
	
	private String getFormattedErrorMessageForLogging() {
		return lhs().errMsg().replace("\n", "\\n");
	}
}
