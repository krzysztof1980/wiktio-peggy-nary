//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2015-07-07 23:04:29 GMT
//  from grammar
//    '/home/krzysiek/dev/projects/fiszki/wiktionary-parser/src/main/java/p
//    l/kwitukiewicz/wiktionary/parser/../../../../../resources/grammar.txt
//    '.
//
//=========================================================================

package wiktiopeggynary.parser;

import wiktiopeggynary.model.Kasus;
import wiktiopeggynary.model.Numerus;
import wiktiopeggynary.model.WiktionaryEntry;
import wiktiopeggynary.model.substantiv.FlexionForm;
import wiktiopeggynary.model.substantiv.Substantiv;
import wiktiopeggynary.model.translation.Translation;
import wiktiopeggynary.model.translation.TranslationMeaning;
import wiktiopeggynary.parser.mouse.Phrase;
import wiktiopeggynary.parser.mouse.SemanticsBase;

import java.util.*;

class WiktionarySemantics extends SemanticsBase {

    private String lemma;
    private Stack<WiktionaryEntry> wiktionaryEntries = new Stack<>();

    public Collection<WiktionaryEntry> getWiktionaryEntries() {
        return Collections.unmodifiableCollection(wiktionaryEntries);
    }

    //-------------------------------------------------------------------
    //  Lemma = Letter+ Space
    //-------------------------------------------------------------------
    void lemma() {
        lemma = rhsText(0, rhsSize() - 1);
    }

    //-------------------------------------------------------------------
    //  SubstantivSectionHead = Head3 "{{Wortart|Substantiv|Deutsch}},"
    //    Space Gender Head3 EOL
    //-------------------------------------------------------------------
    void createSubstantiv() {
        Substantiv s = new Substantiv();
        s.setLemma(lemma);
        s.setGender((String) rhs(3).get());
        wiktionaryEntries.push(s);
    }

    //-------------------------------------------------------------------
    //  Gender = LT Letter+ RT Space
    //-------------------------------------------------------------------
    void gender() {
        lhs().put(rhsText(1, rhsSize() - 2));
    }

    //-------------------------------------------------------------------
    //  NomSg = "Nominativ Singular" Space Digit Space "="
    //    FlexionVariantList EOL
    //-------------------------------------------------------------------
    void addNomSg() {
        addFlexionForm(Kasus.Nominativ, Numerus.Singular);
    }

    //-------------------------------------------------------------------
    //  NomPl = "Nominativ Plural" Space Digit Space "="
    //    FlexionVariantList EOL
    //-------------------------------------------------------------------
    void addNomPl() {
        addFlexionForm(Kasus.Nominativ, Numerus.Plural);
    }

    //-------------------------------------------------------------------
    //  GenSg = "Genitiv Singular" Space Digit Space "="
    //    FlexionVariantList EOL
    //-------------------------------------------------------------------
    void addGenSg() {
        addFlexionForm(Kasus.Genitiv, Numerus.Singular);
    }

    //-------------------------------------------------------------------
    //  GenPl = "Genitiv Plural" Space Digit Space "=" FlexionVariantList
    //    EOL
    //-------------------------------------------------------------------
    void addGenPl() {
        addFlexionForm(Kasus.Genitiv, Numerus.Plural);
    }

    //-------------------------------------------------------------------
    //  DatSg = "Dativ Singular" Space Digit Space "=" FlexionVariantList
    //    EOL
    //-------------------------------------------------------------------
    void addDatSg() {
        addFlexionForm(Kasus.Dativ, Numerus.Singular);
    }

    //-------------------------------------------------------------------
    //  DatPl = "Dativ Plural" Space Digit Space "=" FlexionVariantList
    //    EOL
    //-------------------------------------------------------------------
    void addDatPl() {
        addFlexionForm(Kasus.Dativ, Numerus.Plural);
    }

    //-------------------------------------------------------------------
    //  AkkSg = "Akkusativ Singular" Space Digit Space "="
    //    FlexionVariantList EOL
    //-------------------------------------------------------------------
    void addAkkSg() {
        addFlexionForm(Kasus.Akkusativ, Numerus.Singular);
    }

    //-------------------------------------------------------------------
    //  AkkPl = "Akkusativ Plural" Space Digit Space "="
    //    FlexionVariantList EOL
    //-------------------------------------------------------------------
    void addAkkPl() {
        addFlexionForm(Kasus.Akkusativ, Numerus.Plural);
    }

    private void addFlexionForm(Kasus kasus, Numerus numerus) {
        FlexionForm flexionForm = new FlexionForm(kasus, numerus);
        Phrase flexionVariantListPhrase = rhs(5);
        if (flexionVariantListPhrase.get() != null) {
            ((Iterable<String>) flexionVariantListPhrase.get()).forEach(v -> flexionForm.addVariant(v));
        } else {
            flexionForm.setUnparsedForm(flexionVariantListPhrase.text());
        }
        ((Substantiv) wiktionaryEntries.peek()).getFlexionTable().addFlexionForm(flexionForm);
    }

    //-------------------------------------------------------------------
    //  FlexionVariantList = Space Phrase (BR Phrase)*
    //-------------------------------------------------------------------
    void flexionVariantList() {
        List<String> variants = new ArrayList<>();
        for (int i = 1; i < rhsSize(); i += 2) {
            variants.add(rhs(i).text());
        }
        lhs().put(variants);
    }

    //-------------------------------------------------------------------
    //  FlexionVariantList = Space "-" Space
    //-------------------------------------------------------------------
    void absentFlexionForm() {
        lhs().put(new ArrayList<>());
    }

    //-------------------------------------------------------------------
    //  LangTranslations = LangLvl Lang ":" Space TranslationMeaning
    //      (";" Space TranslationMeaning)* EOL
    //-------------------------------------------------------------------
    void addTranslationsForLanguage() {
        String language = (String) rhs(1).get();
        for (int i = 4; i < rhsSize(); i += 3)
            wiktionaryEntries.peek().addTranslationMeaning(language, (TranslationMeaning) rhs(i).get());
    }

    //-------------------------------------------------------------------
    //  Lang = LT Word RT
    //-------------------------------------------------------------------
    void lang() {
        lhs().put(rhs(1).text());
    }

    //-------------------------------------------------------------------
    //  TranslationMeaning = TranslationMeaningNo Translation
    //      ("," Space Translation)*
    //-------------------------------------------------------------------
    void translationMeaning() {
        TranslationMeaning meaning = new TranslationMeaning((String) rhs(0).get());
        for (int i = 1; i < rhsSize(); i += 3)
            meaning.addTranslation((Translation) rhs(i).get());
        lhs().put(meaning);
    }

    //-------------------------------------------------------------------
    //  TranslationMeaningNo = "[" _++ "]" Space
    //-------------------------------------------------------------------
    void translationMeaningNo() {
        lhs().put(rhsText(1, rhsSize() - 2));
    }

    //-------------------------------------------------------------------
    //  Translation = LT (UeTemplate / UetTemplate) RT Space Gender?
    //-------------------------------------------------------------------
    void translation() {
        Translation t = (Translation) rhs(1).get();
        if (rhsSize() == 5)
            t.setGender((String) rhs(4).get());
        lhs().put(t);
    }

    //-------------------------------------------------------------------
    //  UeTemplate = ("Ü" / "Ü?") IT TemplateAttr IT TemplateAttr
    //      (IT TemplateAttr)? (IT TemplateAttr)?
    //-------------------------------------------------------------------
    void ueTemplate() {
        Translation translation = new Translation();
        translation.setInternalLink(rhs(4).text());
        if (rhsSize() >= 7)
            translation.setLabel(rhs(6).text());
        if (rhsSize() == 9)
            translation.setExternalLink(rhs(8).text());
        lhs().put(translation);
    }

    //-------------------------------------------------------------------
    //  UetTemplate = ("Ü" / "Ü?") IT TemplateAttr IT TemplateAttr
    //      IT TemplateAttr (IT TemplateAttr)? (IT TemplateAttr)?
    //-------------------------------------------------------------------
    void uetTemplate() {
        Translation translation = new Translation();
        translation.setInternalLink(rhs(4).text());
        translation.setTranscription(rhs(6).text());
        if (rhsSize() >= 9)
            translation.setLabel(rhs(8).text());
        if (rhsSize() == 11)
            translation.setExternalLink(rhs(10).text());
        lhs().put(translation);
    }
}
