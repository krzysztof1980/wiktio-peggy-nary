//=========================================================================
//
//  This file was generated by Mouse 1.7 at 2016-05-28 10:32:23 GMT
//  from grammar
//    '/home/krzysiek/dev/projects/fiszki/wiktionary-parser/src/main/java/w
//    iktiopeggynary/parser/template/parser/../../../../../resources/templa
//    te_grammar.txt'.
//
//=========================================================================

package wiktiopeggynary.parser.template.parser;

import wiktiopeggynary.parser.mouse.Source;

public class TemplateParser extends wiktiopeggynary.parser.mouse.ParserBase
{
  final TemplateSemantics sem;
  
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public TemplateParser()
    {
      sem = new TemplateSemantics();
      sem.rule = this;
      super.sem = sem;
    }
  
  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      sem.init();
      boolean result = TemplateDefinition();
      closeParser(result);
      return result;
    }
  
  //-------------------------------------------------------------------
  //  Get semantics
  //-------------------------------------------------------------------
  public TemplateSemantics semantics()
    { return sem; }
  
  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  TemplateDefinition = Space TemplateDefinitionComponent* EOF
  //    {TemplateDefinition} ;
  //=====================================================================
  private boolean TemplateDefinition()
    {
      begin("TemplateDefinition");
      Space();
      while (TemplateDefinitionComponent());
      if (!EOF()) return reject();
      sem.TemplateDefinition();
      return accept();
    }
  
  //=====================================================================
  //  TParam = LP TParamName (SEP DefaultValue)? RP Space {TParam} ;
  //=====================================================================
  private boolean TParam()
    {
      begin("TParam");
      if (!LP()) return reject();
      if (!TParamName()) return reject();
      TParam_0();
      if (!RP()) return reject();
      Space();
      sem.TParam();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TParam_0 = SEP DefaultValue
  //-------------------------------------------------------------------
  private boolean TParam_0()
    {
      begin("");
      if (!SEP()) return rejectInner();
      DefaultValue();
      return acceptInner();
    }
  
  //=====================================================================
  //  TParamName = (!(SEP / RP) _)+ ;
  //=====================================================================
  private boolean TParamName()
    {
      begin("TParamName");
      if (!TParamName_0()) return reject();
      while (TParamName_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TParamName_0 = !(SEP / RP) _
  //-------------------------------------------------------------------
  private boolean TParamName_0()
    {
      begin("");
      if (!TParamName_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  TParamName_1 = !(SEP / RP)
  //-------------------------------------------------------------------
  private boolean TParamName_1()
    {
      begin("","not SEP / RP");
      if (TParamName_2()) return rejectPred();
      return acceptPred();
    }
  
  //-------------------------------------------------------------------
  //  TParamName_2 = SEP / RP
  //-------------------------------------------------------------------
  private boolean TParamName_2()
    {
      begin("");
      if (SEP()) return acceptInner();
      if (RP()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  DefaultValue = (!RP _)* ;
  //=====================================================================
  private boolean DefaultValue()
    {
      begin("DefaultValue");
      while (DefaultValue_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  DefaultValue_0 = !RP _
  //-------------------------------------------------------------------
  private boolean DefaultValue_0()
    {
      begin("");
      if (!DefaultValue_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  DefaultValue_1 = !RP
  //-------------------------------------------------------------------
  private boolean DefaultValue_1()
    {
      begin("","not RP");
      if (RP()) return rejectPred();
      return acceptPred();
    }
  
  //=====================================================================
  //  Function = LF "#" FName ":" FParam (SEP FParam)* RF {Function} ;
  //=====================================================================
  private boolean Function()
    {
      begin("Function");
      if (!LF()) return reject();
      if (!next('#')) return reject();
      if (!FName()) return reject();
      if (!next(':')) return reject();
      FParam();
      while (Function_0());
      if (!RF()) return reject();
      sem.Function();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Function_0 = SEP FParam
  //-------------------------------------------------------------------
  private boolean Function_0()
    {
      begin("");
      if (!SEP()) return rejectInner();
      FParam();
      return acceptInner();
    }
  
  //=====================================================================
  //  FName = (!COL _)+ ;
  //=====================================================================
  private boolean FName()
    {
      begin("FName");
      if (!FName_0()) return reject();
      while (FName_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  FName_0 = !COL _
  //-------------------------------------------------------------------
  private boolean FName_0()
    {
      begin("");
      if (!FName_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  FName_1 = !COL
  //-------------------------------------------------------------------
  private boolean FName_1()
    {
      begin("","not COL");
      if (COL()) return rejectPred();
      return acceptPred();
    }
  
  //=====================================================================
  //  FParam = Space (!(SEP / RF) TemplateDefinitionComponent)* {FParam}
  //    ;
  //=====================================================================
  private boolean FParam()
    {
      begin("FParam");
      Space();
      while (FParam_0());
      sem.FParam();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  FParam_0 = !(SEP / RF) TemplateDefinitionComponent
  //-------------------------------------------------------------------
  private boolean FParam_0()
    {
      begin("");
      if (!FParam_1()) return rejectInner();
      if (!TemplateDefinitionComponent()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  FParam_1 = !(SEP / RF)
  //-------------------------------------------------------------------
  private boolean FParam_1()
    {
      begin("","not SEP / RF");
      if (FParam_2()) return rejectPred();
      return acceptPred();
    }
  
  //-------------------------------------------------------------------
  //  FParam_2 = SEP / RF
  //-------------------------------------------------------------------
  private boolean FParam_2()
    {
      begin("");
      if (SEP()) return acceptInner();
      if (RF()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  SwitchFunction = LF "#switch:" FParam (SEP SwitchTestCase)+ RF
  //    {SwitchFunction} ;
  //=====================================================================
  private boolean SwitchFunction()
    {
      begin("SwitchFunction");
      if (!LF()) return reject();
      if (!next("#switch:")) return reject();
      FParam();
      if (!SwitchFunction_0()) return reject();
      while (SwitchFunction_0());
      if (!RF()) return reject();
      sem.SwitchFunction();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  SwitchFunction_0 = SEP SwitchTestCase
  //-------------------------------------------------------------------
  private boolean SwitchFunction_0()
    {
      begin("");
      if (!SEP()) return rejectInner();
      if (!SwitchTestCase()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  SwitchTestCase = "#default" Space EQ FParam {SwitchTestCase_0} /
  //    SwitchTest Space &RF {SwitchTestCase_1} / SwitchTest (EQ FParam)?
  //    {SwitchTestCase_2} ;
  //=====================================================================
  private boolean SwitchTestCase()
    {
      begin("SwitchTestCase");
      if (SwitchTestCase_0())
      { sem.SwitchTestCase_0(); return accept(); }
      if (SwitchTestCase_1())
      { sem.SwitchTestCase_1(); return accept(); }
      if (SwitchTestCase_2())
      { sem.SwitchTestCase_2(); return accept(); }
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTestCase_0 = "#default" Space EQ FParam
  //-------------------------------------------------------------------
  private boolean SwitchTestCase_0()
    {
      begin("");
      if (!next("#default")) return rejectInner();
      Space();
      if (!EQ()) return rejectInner();
      FParam();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTestCase_1 = SwitchTest Space &RF
  //-------------------------------------------------------------------
  private boolean SwitchTestCase_1()
    {
      begin("");
      if (!SwitchTest()) return rejectInner();
      Space();
      if (!SwitchTestCase_3()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTestCase_2 = SwitchTest (EQ FParam)?
  //-------------------------------------------------------------------
  private boolean SwitchTestCase_2()
    {
      begin("");
      if (!SwitchTest()) return rejectInner();
      SwitchTestCase_4();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTestCase_3 = &RF
  //-------------------------------------------------------------------
  private boolean SwitchTestCase_3()
    {
      begin("","RF");
      if (!RF()) return rejectPred();
      return acceptPred();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTestCase_4 = EQ FParam
  //-------------------------------------------------------------------
  private boolean SwitchTestCase_4()
    {
      begin("");
      if (!EQ()) return rejectInner();
      FParam();
      return acceptInner();
    }
  
  //=====================================================================
  //  SwitchTest = (!(SEP / RF / EQ) TemplateDefinitionComponent)+
  //    {SwitchTest} ;
  //=====================================================================
  private boolean SwitchTest()
    {
      begin("SwitchTest");
      if (!SwitchTest_0()) return reject();
      while (SwitchTest_0());
      sem.SwitchTest();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTest_0 = !(SEP / RF / EQ) TemplateDefinitionComponent
  //-------------------------------------------------------------------
  private boolean SwitchTest_0()
    {
      begin("");
      if (!SwitchTest_1()) return rejectInner();
      if (!TemplateDefinitionComponent()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTest_1 = !(SEP / RF / EQ)
  //-------------------------------------------------------------------
  private boolean SwitchTest_1()
    {
      begin("","not SEP / RF / EQ");
      if (SwitchTest_2()) return rejectPred();
      return acceptPred();
    }
  
  //-------------------------------------------------------------------
  //  SwitchTest_2 = SEP / RF / EQ
  //-------------------------------------------------------------------
  private boolean SwitchTest_2()
    {
      begin("");
      if (SEP()) return acceptInner();
      if (RF()) return acceptInner();
      if (EQ()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  TemplateDefinitionComponent = TParam
  //    {TemplateDefinitionComponent_0} / (SwitchFunction / Function)
  //    {TemplateDefinitionComponent_1} / TemplateCall
  //    {TemplateDefinitionComponent_2} / (NoInclude / IncludeOnly /
  //    Comment) / _ {TemplateDefinitionComponent_4} ;
  //=====================================================================
  private boolean TemplateDefinitionComponent()
    {
      begin("TemplateDefinitionComponent");
      if (TParam())
      { sem.TemplateDefinitionComponent_0(); return accept(); }
      if (TemplateDefinitionComponent_0())
      { sem.TemplateDefinitionComponent_1(); return accept(); }
      if (TemplateCall())
      { sem.TemplateDefinitionComponent_2(); return accept(); }
      if (TemplateDefinitionComponent_1()) return accept();
      if (next())
      { sem.TemplateDefinitionComponent_4(); return accept(); }
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  TemplateDefinitionComponent_0 = SwitchFunction / Function
  //-------------------------------------------------------------------
  private boolean TemplateDefinitionComponent_0()
    {
      begin("");
      if (SwitchFunction()) return acceptInner();
      if (Function()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  TemplateDefinitionComponent_1 = NoInclude / IncludeOnly /
  //    Comment
  //-------------------------------------------------------------------
  private boolean TemplateDefinitionComponent_1()
    {
      begin("");
      if (NoInclude()) return acceptInner();
      if (IncludeOnly()) return acceptInner();
      if (Comment()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  NoInclude = "<noinclude>" _*+ "</noinclude>" ;
  //=====================================================================
  private boolean NoInclude()
    {
      begin("NoInclude");
      if (!next("<noinclude>")) return reject();
      while (!next("</noinclude>"))
        if (!next()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  IncludeOnly = "<includeonly>" _*+ "</includeonly>" ;
  //=====================================================================
  private boolean IncludeOnly()
    {
      begin("IncludeOnly");
      if (!next("<includeonly>")) return reject();
      while (!next("</includeonly>"))
        if (!next()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  TemplateCall = LF TName (SEP TCallParam)* RF {TemplateCall} ;
  //=====================================================================
  private boolean TemplateCall()
    {
      begin("TemplateCall");
      if (!LF()) return reject();
      if (!TName()) return reject();
      while (TemplateCall_0());
      if (!RF()) return reject();
      sem.TemplateCall();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TemplateCall_0 = SEP TCallParam
  //-------------------------------------------------------------------
  private boolean TemplateCall_0()
    {
      begin("");
      if (!SEP()) return rejectInner();
      TCallParam();
      return acceptInner();
    }
  
  //=====================================================================
  //  TName = (!(SEP / RF) _)+ ;
  //=====================================================================
  private boolean TName()
    {
      begin("TName");
      if (!TName_0()) return reject();
      while (TName_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TName_0 = !(SEP / RF) _
  //-------------------------------------------------------------------
  private boolean TName_0()
    {
      begin("");
      if (!FParam_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  TCallParam = Number EQ (!(SEP / RF) TemplateDefinitionComponent)*
  //    {TCallParam_0} / TCallParamName EQ (!(SEP / RF)
  //    TemplateDefinitionComponent)* {TCallParam_1} / (!(SEP / RF)
  //    TemplateDefinitionComponent)* {TCallParam_2} ;
  //=====================================================================
  private boolean TCallParam()
    {
      begin("TCallParam");
      if (TCallParam_0())
      { sem.TCallParam_0(); return accept(); }
      if (TCallParam_1())
      { sem.TCallParam_1(); return accept(); }
      if (TCallParam_2())
      { sem.TCallParam_2(); return accept(); }
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  TCallParam_0 = Number EQ (!(SEP / RF)
  //    TemplateDefinitionComponent)*
  //-------------------------------------------------------------------
  private boolean TCallParam_0()
    {
      begin("");
      if (!Number()) return rejectInner();
      if (!EQ()) return rejectInner();
      while (FParam_0());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  TCallParam_1 = TCallParamName EQ (!(SEP / RF)
  //    TemplateDefinitionComponent)*
  //-------------------------------------------------------------------
  private boolean TCallParam_1()
    {
      begin("");
      if (!TCallParamName()) return rejectInner();
      if (!EQ()) return rejectInner();
      while (FParam_0());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  TCallParam_2 = (!(SEP / RF) TemplateDefinitionComponent)*
  //-------------------------------------------------------------------
  private boolean TCallParam_2()
    {
      begin("");
      while (FParam_0());
      return acceptInner();
    }
  
  //=====================================================================
  //  TCallParamName = (!EQ _)+ ;
  //=====================================================================
  private boolean TCallParamName()
    {
      begin("TCallParamName");
      if (!TCallParamName_0()) return reject();
      while (TCallParamName_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TCallParamName_0 = !EQ _
  //-------------------------------------------------------------------
  private boolean TCallParamName_0()
    {
      begin("");
      if (!TCallParamName_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  TCallParamName_1 = !EQ
  //-------------------------------------------------------------------
  private boolean TCallParamName_1()
    {
      begin("","not EQ");
      if (EQ()) return rejectPred();
      return acceptPred();
    }
  
  //=====================================================================
  //  LP = "{{{" ;
  //=====================================================================
  private boolean LP()
    {
      begin("LP");
      if (!next("{{{")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  RP = "}}}" ;
  //=====================================================================
  private boolean RP()
    {
      begin("RP");
      if (!next("}}}")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  LF = "{{" Space ;
  //=====================================================================
  private boolean LF()
    {
      begin("LF");
      if (!next("{{")) return reject();
      Space();
      return accept();
    }
  
  //=====================================================================
  //  RF = Space "}}" Space ;
  //=====================================================================
  private boolean RF()
    {
      begin("RF");
      Space();
      if (!next("}}")) return reject();
      Space();
      return accept();
    }
  
  //=====================================================================
  //  SEP = Space "|" Space ;
  //=====================================================================
  private boolean SEP()
    {
      begin("SEP");
      Space();
      if (!next('|')) return reject();
      Space();
      return accept();
    }
  
  //=====================================================================
  //  EQ = Space "=" Space ;
  //=====================================================================
  private boolean EQ()
    {
      begin("EQ");
      Space();
      if (!next('=')) return reject();
      Space();
      return accept();
    }
  
  //=====================================================================
  //  COL = Space ":" Space ;
  //=====================================================================
  private boolean COL()
    {
      begin("COL");
      Space();
      if (!next(':')) return reject();
      Space();
      return accept();
    }
  
  //=====================================================================
  //  Number = Digit+ ;
  //=====================================================================
  private boolean Number()
    {
      begin("Number");
      if (!Digit()) return reject();
      while (Digit());
      return accept();
    }
  
  //=====================================================================
  //  Digit = [0-9] ;
  //=====================================================================
  private boolean Digit()
    {
      begin("Digit");
      if (!nextIn('0','9')) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Letter = [a-z] / [A-Z] / [äÄüÜöÖß] ;
  //=====================================================================
  private boolean Letter()
    {
      begin("Letter");
      if (nextIn('a','z')) return accept();
      if (nextIn('A','Z')) return accept();
      if (nextIn("\u00e4\u00c4\u00fc\u00dc\u00f6\u00d6\u00df")) return accept();
      return reject();
    }
  
  //=====================================================================
  //  Space = (" " / EOL / Comment)* ;
  //=====================================================================
  private boolean Space()
    {
      begin("Space");
      while (Space_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Space_0 = " " / EOL / Comment
  //-------------------------------------------------------------------
  private boolean Space_0()
    {
      begin("");
      if (next(' ')) return acceptInner();
      if (EOL()) return acceptInner();
      if (Comment()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  Comment = "<!--" _++ "-->" ;
  //=====================================================================
  private boolean Comment()
    {
      begin("Comment");
      if (!next("<!--")) return reject();
      if (next("-->")) return reject();
      do if (!next()) return reject();
        while (!next("-->"));
      return accept();
    }
  
  //=====================================================================
  //  EOF = !_ ;
  //=====================================================================
  private boolean EOF()
    {
      begin("EOF");
      if (!aheadNot()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  EOL = [\r\n]+ ;
  //=====================================================================
  private boolean EOL()
    {
      begin("EOL");
      if (!nextIn("\r\n")) return reject();
      while (nextIn("\r\n"));
      return accept();
    }
  
}
