//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2015-08-08 18:14:26 GMT
//  from grammar
//    '/home/krzysiek/dev/projects/fiszki/wiktionary-parser/src/main/java/w
//    iktiopeggynary/parser/template/parser/../../../../../resources/templa
//    te_grammar.txt'.
//
//=========================================================================

package wiktiopeggynary.parser.template.parser;

import wiktiopeggynary.parser.template.model.*;
import wiktiopeggynary.parser.template.model.functions.ParserFunction;
import wiktiopeggynary.parser.template.model.functions.ParserFunctionType;
import wiktiopeggynary.parser.template.model.functions.SwitchParserFunction;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Objects;
import java.util.stream.IntStream;

public class TemplateSemantics extends wiktiopeggynary.parser.mouse.SemanticsBase {

	private TemplateDefinition templateDefinition;

	private Collection<Template> templates = new ArrayList<>();

	public TemplateDefinition getTemplateDefinition() {
		return templateDefinition;
	}

	public Collection<Template> getTemplates() {
		return templates;
	}

	//-------------------------------------------------------------------
	//  TemplateDefinition = Space TemplateDefinitionComponent* EOF
	//-------------------------------------------------------------------
	void TemplateDefinition() {
		templateDefinition = new TemplateDefinition();
		IntStream.range(1, rhsSize())
		         .mapToObj(i -> rhs(i).get())
		         .filter(Objects::nonNull)
		         .forEach(o -> templateDefinition.addComponent((DisplayableAsText) o));
	}

	//-------------------------------------------------------------------
	//  TParam = LP Number (SEP DefaultValue)? RP Space
	//           0     1     2        3       4(2) 5(3)
	//-------------------------------------------------------------------
	void TParam_0() {
		TParam(new NumberedTemplateParameterApplication(Integer.valueOf(rhs(1).text())));
	}

	//-------------------------------------------------------------------
	//  TParam = LP Name (SEP DefaultValue)? RP Space
	//           0   1     2        3       4(2) 5(3)
	//-------------------------------------------------------------------
	void TParam_1() {
		TParam(new NamedTemplateParameterApplication(rhs(1).text()));
	}

	private void TParam(TemplateParameterApplication param) {
		if (rhsSize() == 6) {
			param.setDefaultValue(rhs(3).text());
		}
		lhs().put(param);
	}

	//-------------------------------------------------------------------
	//  Function = LF "#" Name ":" FParam (SEP FParam)* RF
	//              0  1    2   3     4    5      6     n-1
	//-------------------------------------------------------------------
	void Function() {
		String name = rhs(2).text();
		ParserFunctionType functionType = ParserFunctionType.valueOf(name.toUpperCase());
		ParserFunction function = functionType.createParserFunction();
		for (int i = 4; i < rhsSize() - 1; i += 2) {
			function.addParameter((DisplayableAsText) rhs(i).get());
		}
		lhs().put(function);
	}

	//-------------------------------------------------------------------
	//  FParam = Space (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	void FParam() {
		lhs().put(processSequenceOfDisplayableAsText(1));
	}

	//-------------------------------------------------------------------
	//  SwitchFunction = LF "#switch:" FParam (SEP SwitchTestCase)+ RF
	//                   0       1       2      3         4         n-1
	//-------------------------------------------------------------------
	public void SwitchFunction() {
		SwitchParserFunction function = new SwitchParserFunction((DisplayableAsText) rhs(2).get());
		for (int i = 4; i < rhsSize() - 1; i += 2) {
			function.addTestCase((SwitchParserFunction.SwitchTestCase) rhs(i).get());
		}
		lhs().put(function);
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = "#default" Space EQ FParam
	//                       0        1    2    3
	//-------------------------------------------------------------------
	public void SwitchTestCase_0() {
		lhs().put(new SwitchParserFunction.SwitchTestCase((DisplayableAsText) rhs(3).get()));
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = SwitchTest Space &RF
	//                       0       1
	//-------------------------------------------------------------------
	public void SwitchTestCase_1() {
		lhs().put(new SwitchParserFunction.SwitchTestCase((DisplayableAsText) rhs(0).get()));
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = SwitchTest (EQ FParam)?
	//                       0       1     2
	//-------------------------------------------------------------------
	public void SwitchTestCase_2() {
		DisplayableAsText test = (DisplayableAsText) rhs(0).get();
		DisplayableAsText result = rhsSize() == 3 ? (DisplayableAsText) rhs(2).get() : null;
		lhs().put(new SwitchParserFunction.SwitchTestCase(test, result));
	}

	//-------------------------------------------------------------------
	//  SwitchTest = (!(SEP / RF / EQ) TemplateDefinitionComponent)+
	//                                              0
	//-------------------------------------------------------------------
	public void SwitchTest() {
		lhs().put(processSequenceOfDisplayableAsText(0));
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = TParam
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_0() {
		lhs().put(rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = (SwitchFunction / Function)
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_1() {
		lhs().put(rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = TemplateCall
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_2() {
		lhs().put(rhs(0).get());
		templates.add((Template) rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = !EOL _
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_4() {
		lhs().put(new PlainText(rhsText(0, rhsSize())));
	}

	//-------------------------------------------------------------------
	//  TemplateCall = LF TName (SEP TCallParam)* RF
	//                 0    1     2       3       n-1
	//-------------------------------------------------------------------
	public void TemplateCall() {
		Template template = new Template(rhs(1).text());
		for (int i = 3; i < rhsSize() - 1; i+=2) {
			template.addParameter((TemplateParameter) rhs(i).get());
		}
		lhs().put(template);
	}

	//-------------------------------------------------------------------
	//  TCallParam = Number EQ (!(SEP / RF) TemplateDefinitionComponent)*
	//                        0    1                          2
	//-------------------------------------------------------------------
	public void TCallParam_0() {
		lhs().put(new NumberedTemplateParameter(Integer.valueOf(rhs(0).text()), processSequenceOfDisplayableAsText(2)));
	}

	//-------------------------------------------------------------------
	//  TCallParam = Name EQ (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	public void TCallParam_1() {
		lhs().put(new NamedTemplateParameter(rhs(0).text(), processSequenceOfDisplayableAsText(2)));
	}

	//-------------------------------------------------------------------
	//  TCallParam = (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	public void TCallParam_2() {
		lhs().put(new AnonymousTemplateParameter(processSequenceOfDisplayableAsText(0)));
	}

	private DisplayableAsText processSequenceOfDisplayableAsText(int offset) {
		CompoundDisplayableAsText compound = new CompoundDisplayableAsText();
		IntStream.range(offset, rhsSize())
		         .mapToObj(i -> rhs(i).get())
		         .filter(Objects::nonNull)
		         .forEach(o -> compound.addComponent((DisplayableAsText) o));
		if (compound.getComponents().size() == 0)
			return PlainText.EMPTY_TEXT;
		if (compound.getComponents().size() == 1)
			return compound.getComponents().get(0);
		return compound;
	}
}
