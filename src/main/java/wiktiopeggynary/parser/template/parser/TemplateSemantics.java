//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2015-08-08 18:14:26 GMT
//  from grammar
//    '/home/krzysiek/dev/projects/fiszki/wiktionary-parser/src/main/java/w
//    iktiopeggynary/parser/template/parser/../../../../../resources/templa
//    te_grammar.txt'.
//
//=========================================================================

package wiktiopeggynary.parser.template.parser;

import wiktiopeggynary.model.markup.*;
import wiktiopeggynary.parser.template.model.TemplateDefinition;
import wiktiopeggynary.parser.template.model.TemplateParameterApplication;
import wiktiopeggynary.parser.template.model.functions.ParserFunctionType;
import wiktiopeggynary.parser.template.model.functions.SwitchParserFunction;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Objects;
import java.util.stream.IntStream;

public class TemplateSemantics extends wiktiopeggynary.parser.mouse.SemanticsBase {

	private TemplateDefinition templateDefinition;

	private Collection<Template> templates = new ArrayList<>();

	public TemplateDefinition getTemplateDefinition() {
		return templateDefinition;
	}

	public Collection<Template> getTemplates() {
		return templates;
	}

	//-------------------------------------------------------------------
	//  TemplateDefinition = Space TemplateDefinitionComponent* EOF
	//-------------------------------------------------------------------
	void TemplateDefinition() {
		RichText body = new RichText();
		IntStream.range(1, rhsSize())
		         .mapToObj(i -> rhs(i).get())
		         .filter(Objects::nonNull)
		         .forEach(o -> body.addComponent((RichTextComponent) o));
		templateDefinition = new TemplateDefinition(body);
	}

	//-------------------------------------------------------------------
	//  TParam = LP Name (SEP DefaultValue)? RP Space
	//           0   1     2        3       4(2) 5(3)
	//-------------------------------------------------------------------
	void TParam() {
		TemplateParameterApplication.Builder builder = new TemplateParameterApplication.Builder().withIdentifier(rhs(1).text());
		if (rhsSize() == 6) {
			// TODO: maybe it should be a RichText, and not a simple String
			builder.withDefaultValue(new RichText(new PlainText(rhs(3).text())));
		}
		lhs().put(builder.build());
	}

	//-------------------------------------------------------------------
	//  Function = LF "#" Name ":" FParam (SEP FParam)* RF
	//              0  1    2   3     4    5      6     n-1
	//-------------------------------------------------------------------
	void Function() {
		String name = rhs(2).text();
		ParserFunctionType functionType = ParserFunctionType.valueOf(name.toUpperCase());
		RichText[] parameters = new RichText[(rhsSize() - 4) / 2];
		for (int i = 0, j = 4; j < rhsSize() - 1; i++, j += 2) {
			parameters[i] = (RichText) rhs(j).get();
		}
		lhs().put(functionType.createParserFunction(parameters));
	}

	//-------------------------------------------------------------------
	//  FParam = Space (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	void FParam() {
		lhs().put(processSequenceOfRichTextComponents(1));
	}

	//-------------------------------------------------------------------
	//  SwitchFunction = LF "#switch:" FParam (SEP SwitchTestCase)+ RF
	//                   0       1       2      3         4         n-1
	//-------------------------------------------------------------------
	public void SwitchFunction() {
		SwitchParserFunction function = new SwitchParserFunction((RichText) rhs(2).get());
		for (int i = 4; i < rhsSize() - 1; i += 2) {
			function.addTestCase((SwitchParserFunction.SwitchTestCase) rhs(i).get());
		}
		lhs().put(function);
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = "#default" Space EQ FParam
	//                       0        1    2    3
	//-------------------------------------------------------------------
	public void SwitchTestCase_0() {
		lhs().put(new SwitchParserFunction.SwitchTestCase((RichText) rhs(3).get()));
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = SwitchTest Space &RF
	//                       0       1
	//-------------------------------------------------------------------
	public void SwitchTestCase_1() {
		lhs().put(new SwitchParserFunction.SwitchTestCase((RichText) rhs(0).get()));
	}

	//-------------------------------------------------------------------
	//  SwitchTestCase = SwitchTest (EQ FParam)?
	//                       0       1     2
	//-------------------------------------------------------------------
	public void SwitchTestCase_2() {
		RichText test = (RichText) rhs(0).get();
		RichText result = rhsSize() == 3 ? (RichText) rhs(2).get() : null;
		lhs().put(new SwitchParserFunction.SwitchTestCase(test, result));
	}

	//-------------------------------------------------------------------
	//  SwitchTest = (!(SEP / RF / EQ) TemplateDefinitionComponent)+
	//                                              0
	//-------------------------------------------------------------------
	public void SwitchTest() {
		lhs().put(processSequenceOfRichTextComponents(0));
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = TParam
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_0() {
		lhs().put(rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = (SwitchFunction / Function)
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_1() {
		lhs().put(rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = TemplateCall
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_2() {
		lhs().put(rhs(0).get());
		templates.add((Template) rhs(0).get());
	}

	//-------------------------------------------------------------------
	//  TemplateDefinitionComponent = !EOL _
	//-------------------------------------------------------------------
	void TemplateDefinitionComponent_4() {
		lhs().put(new PlainText(rhsText(0, rhsSize())));
	}

	//-------------------------------------------------------------------
	//  TemplateCall = LF TName (SEP TCallParam)* RF
	//                 0    1     2       3       n-1
	//-------------------------------------------------------------------
	public void TemplateCall() {
		Template.Builder templateBuilder = new Template.Builder().withName(rhs(1).text());
		for (int i = 3; i < rhsSize() - 1; i+=2) {
			templateBuilder.withParameter((TemplateParameter) rhs(i).get());
		}
		lhs().put(templateBuilder.build());
	}

	//-------------------------------------------------------------------
	//  TCallParam = Number EQ (!(SEP / RF) TemplateDefinitionComponent)*
	//                        0    1                          2
	//-------------------------------------------------------------------
	public void TCallParam_0() {
		lhs().put(new NumberedTemplateParameter(Integer.valueOf(rhs(0).text()), processSequenceOfRichTextComponents(2)));
	}

	//-------------------------------------------------------------------
	//  TCallParam = Name EQ (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	public void TCallParam_1() {
		lhs().put(new NamedTemplateParameter(rhs(0).text(), processSequenceOfRichTextComponents(2)));
	}

	//-------------------------------------------------------------------
	//  TCallParam = (!(SEP / RF) TemplateDefinitionComponent)*
	//-------------------------------------------------------------------
	public void TCallParam_2() {
		lhs().put(new AnonymousTemplateParameter(processSequenceOfRichTextComponents(0)));
	}

	private RichText processSequenceOfRichTextComponents(int offset) {
		RichText richText = new RichText();
		IntStream.range(offset, rhsSize())
		         .mapToObj(i -> rhs(i).get())
		         .filter(Objects::nonNull)
		         .forEach(o -> richText.addComponent((RichTextComponent) o));
		return richText;
	}
}
